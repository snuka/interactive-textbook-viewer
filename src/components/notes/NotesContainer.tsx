'use client';

import React, { useState, useCallback } from 'react';
import { useNotes } from '@/hooks/useNotes';
import { NotePanel } from './NotePanel';
import { Note } from '@/types/notes';
import { Button } from '@/components/ui/button';

export const NotesContainer = () => {
  const { notes, addNote, updateNote, deleteNote, setSearchTerm } = useNotes();
  const [selectedNote, setSelectedNote] = useState<Note | null>(null);
  const [isPanelOpen, setIsPanelOpen] = useState(false);

  const handleHighlightClick = useCallback(
    (highlightId: string) => {
      const existingNote = notes.find((n) => n.highlightId === highlightId);
      if (existingNote) {
        setSelectedNote(existingNote);
      } else {
        // Create a new temporary note object
        setSelectedNote({
          id: '', // Will be generated by addNote
          highlightId,
          content: '',
          createdAt: '',
          updatedAt: '',
        });
      }
      setIsPanelOpen(true);
    },
    [notes],
  );

  const handleSaveNote = useCallback(
    (noteId: string, content: string) => {
      if (noteId) {
        updateNote(noteId, content);
      } else if (selectedNote) {
        addNote(selectedNote.highlightId, content);
      }
      setIsPanelOpen(false);
      setSelectedNote(null);
    },
    [addNote, updateNote, selectedNote],
  );

  const handleClosePanel = useCallback(() => {
    setIsPanelOpen(false);
    setSelectedNote(null);
  }, []);

  const handleDeleteNote = (noteId: string) => {
    deleteNote(noteId);
  };

  return (
    <>
      <div className="p-4">
        <h2 className="text-xl font-bold mb-4">My Notes</h2>
        <input
          type="search"
          placeholder="Search notes..."
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full p-2 border rounded mb-4"
        />
        <div className="space-y-2">
          {notes.map((note) => (
            <div key={note.id} className="p-4 border rounded shadow">
              <div
                className="prose dark:prose-invert max-h-24 overflow-y-auto"
                dangerouslySetInnerHTML={{ __html: note.content }}
              />
              <div className="flex justify-end gap-2 mt-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleHighlightClick(note.highlightId)}
                >
                  Edit
                </Button>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => handleDeleteNote(note.id)}
                >
                  Delete
                </Button>
              </div>
            </div>
          ))}
        </div>
      </div>
      {isPanelOpen && selectedNote && (
        <NotePanel
          note={selectedNote}
          onSave={handleSaveNote}
          onClose={handleClosePanel}
        />
      )}
    </>
  );
};
